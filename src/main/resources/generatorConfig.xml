<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!--mysql 连接数据库jar 这里选择自己本地位置-->

    <!--<classPathEntry location="D:/JAVA/maven-repository/.m2/repository/mysql/mysql-connector-java/5.1.30/mysql-connector-java-5.1.30.jar" />-->
    <context id="cmsh2db" targetRuntime="MyBatis3" defaultModelType="flat">
        <commentGenerator>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true" />
        </commentGenerator>
        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
        <jdbcConnection driverClass="org.h2.Driver"
                        connectionURL="jdbc:h2:file:G:/MyWorkSpace/IDEAWorkSpace/MicroERP/src/main/resources/h2db/microerph2db;FILE_LOCK=SOCKET"
                        userId="wdq"
                        password="wdq"/>

        <!--<jdbcConnection-->
        <!--driverClass="${spring.datasource.myh2.driverClassName}"-->
        <!--connectionURL="${spring.datasource.myh2.jdbc-url}"-->
        <!--userId="${spring.datasource.myh2.username}"-->
        <!--password="${spring.datasource.myh2.password}"/>-->
        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
           NUMERIC 类型解析为java.math.BigDecimal -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- targetProject:生成PO类的位置 -->
        <javaModelGenerator targetPackage="com.wdqsoft.system.database.cms.bean"
                            targetProject="src/main/java">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false" />
            <!-- 从数据库返回的值被清理前后的空格 -->
            <property name="trimStrings" value="true" />
        </javaModelGenerator>
        <!-- targetProject:mapper映射文件生成的位置
           如果maven工程只是单独的一个工程，targetProject="src/main/java"
           若果maven工程是分模块的工程，targetProject="所属模块的名称"，例如：
           targetProject="ecps-manager-mapper"，下同-->
        <sqlMapGenerator targetPackage="mybatis.mapper.h2db"
                         targetProject="./src/main/resources">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false" />
        </sqlMapGenerator>
        <!-- targetPackage：mapper接口生成的位置 -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="com.wdqsoft.system.database.cms.mybatis.cmsh2db"
                             targetProject="src/main/java">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false" />
        </javaClientGenerator>
        <!-- 指定数据库表 -->


        <!--<table tableName="BACK_%"  BACK_T_SYSUSER-->
        <!--<table tableName="123T_MOA_%"-->
        <table tableName="123CMS_%"
               enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false"
        >

            <!-- optional   , only for mybatis3 runtime
                 自动生成的键值（identity,或者序列值）
               如果指定此元素，MBG将会生成<selectKey>元素，然后将此元素插入到SQL Map的<insert> 元素之中
               sqlStatement 的语句将会返回新的值
               如果是一个自增主键的话，你可以使用预定义的语句,或者添加自定义的SQL语句. 预定义的值如下:
                  Cloudscape 	This will translate to: VALUES IDENTITY_VAL_LOCAL()
                  DB2: 		VALUES IDENTITY_VAL_LOCAL()
                  DB2_MF:		SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                  Derby: 		VALUES IDENTITY_VAL_LOCAL()
                  HSQLDB: 	CALL IDENTITY()
                  Informix: 	select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                  MySql: 		SELECT LAST_INSERT_ID()
                  SqlServer: 	SELECT SCOPE_IDENTITY()
                  SYBASE: 	SELECT @@IDENTITY
                  JDBC:		This will configure MBG to generate code for MyBatis3 suport of JDBC standard generated keys. This is a database independent method of obtaining the value from identity columns.
                  identity: 自增主键  If true, then the column is flagged as an identity column and the generated <selectKey> element will be placed after the insert (for an identity column). If false, then the generated <selectKey> will be placed before the insert (typically for a sequence).
            -->
            <!--<generatedKey column="" sqlStatement="" identity="" type=""/>-->
            <!--&lt;!&ndash; optional.&ndash;&gt;
                    &lt;!&ndash;列的命名规则：&ndash;&gt;
                    &lt;!&ndash;MBG使用 <columnRenamingRule> 元素在计算列名的对应 名称之前，先对列名进行重命名，&ndash;&gt;
                    &lt;!&ndash;作用：一般需要对BUSI_CLIENT_NO 前的BUSI_进行过滤&ndash;&gt;
                    &lt;!&ndash;支持正在表达式&ndash;&gt;
                     &lt;!&ndash;searchString 表示要被换掉的字符串&ndash;&gt;
                     &lt;!&ndash;replaceString 则是要换成的字符串，默认情况下为空字符串，可选&ndash;&gt;
            &lt;!&ndash;&ndash;&gt;-->
            <!--<columnRenamingRule searchString="" replaceString=""/>-->
            <!--&lt;!&ndash; optional.告诉 MBG 忽略某一列&ndash;&gt;
                    &lt;!&ndash;column，需要忽略的列&ndash;&gt;
                    &lt;!&ndash;delimitedColumnName:true ,匹配column的值和数据库列的名称 大小写完全匹配，false 忽略大小写匹配&ndash;&gt;
                    &lt;!&ndash;是否限定表的列名，即固定表列在Model中的名称&ndash;&gt;
            &lt;!&ndash;&ndash;&gt;-->
            <!--<ignoreColumn column="PLAN_ID"  delimitedColumnName="true" />-->
            <!--&lt;!&ndash;optional.覆盖MBG对Model 的生成规则&ndash;&gt;
                 &lt;!&ndash;column: 数据库的列名&ndash;&gt;
                 &lt;!&ndash;javaType: 对应的Java数据类型的完全限定名&ndash;&gt;
                 &lt;!&ndash;在必要的时候可以覆盖由JavaTypeResolver计算得到的java数据类型. For some databases, this is necessary to handle "odd" database types (e.g. MySql's unsigned bigint type should be mapped to java.lang.Object).&ndash;&gt;
                 &lt;!&ndash;jdbcType:该列的JDBC数据类型(INTEGER, DECIMAL, NUMERIC, VARCHAR, etc.)，该列可以覆盖由JavaTypeResolver计算得到的Jdbc类型，对某些数据库而言，对于处理特定的JDBC 驱动癖好 很有必要(e.g. DB2's LONGVARCHAR type should be mapped to VARCHAR for iBATIS).&ndash;&gt;
                 &lt;!&ndash;typeHandler:&ndash;&gt;
            &lt;!&ndash;&ndash;&gt;-->
            <!--<columnOverride column="" javaType=""	jdbcType=""	typeHandler=""	delimitedColumnName="" />-->
        </table>
    </context>
</generatorConfiguration>

<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<!DOCTYPE generatorConfiguration-->
        <!--PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"-->
        <!--"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">-->
<!--<generatorConfiguration>-->
    <!--&lt;!&ndash;导入属性配置 &ndash;&gt;-->
    <!--<properties resource="generator.properties"></properties>-->

    <!--&lt;!&ndash;指定特定数据库的jdbc驱动jar包的位置 &ndash;&gt;-->
    <!--<classPathEntry location="${jdbc.driverLocation}"/>-->

    <!--<context id="default" targetRuntime="MyBatis3">-->


        <!--&lt;!&ndash; optional，旨在创建class时，对注释进行控制 &ndash;&gt;-->
        <!--<commentGenerator>-->
            <!--<property name="suppressDate" value="true" />-->
        <!--</commentGenerator>-->

<!--&lt;!&ndash;jdbc的数据库连接 &ndash;&gt;-->
        <!--<jdbcConnection driverClass="org.h2.Driver"-->
                        <!--connectionURL="jdbc:h2:file:C:\sinosofe_work\newoa\MobileWorkspace\demo\myh2db;FILE_LOCK=SOCKET"-->
                        <!--userId="sinosoft"-->
                        <!--password="sinosoft">-->
        <!--</jdbcConnection>-->



        <!--&lt;!&ndash; 非必需，类型处理器，在数据库类型和java类型之间的转换控制&ndash;&gt;-->
        <!--<javaTypeResolver >-->
            <!--<property name="forceBigDecimals" value="false" />-->
        <!--</javaTypeResolver>-->

        <!--&lt;!&ndash; Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类&ndash;&gt;
            &lt;!&ndash;targetPackage     指定生成的model生成所在的包名&ndash;&gt;
            &lt;!&ndash;targetProject     指定在该项目下所在的路径&ndash;&gt;

       &lt;!&ndash;&ndash;&gt;
        &lt;!&ndash;&ndash;&gt;-->
        <!--<javaModelGenerator targetPackage="com.sinosoft.sinosoft.bean.model" targetProject="src/main/java">-->
            <!--&lt;!&ndash; 是否对model添加 构造函数 &ndash;&gt;-->
            <!--<property name="constructorBased" value="true"/>-->

            <!--&lt;!&ndash; 是否允许子包，即targetPackage.schemaName.tableName &ndash;&gt;-->
            <!--<property name="enableSubPackages" value="false"/>-->

            <!--&lt;!&ndash; 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 &ndash;&gt;-->
            <!--<property name="immutable" value="true"/>-->

            <!--&lt;!&ndash; 给Model添加一个父类 &ndash;&gt;-->
            <!--<property name="rootClass" value="com.foo.louis.Hello"/>-->

            <!--&lt;!&ndash; 是否对类CHAR类型的列的数据进行trim操作 &ndash;&gt;-->
            <!--<property name="trimStrings" value="true"/>-->
        <!--</javaModelGenerator>-->

        <!--&lt;!&ndash;Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 &ndash;&gt;-->
        <!--<sqlMapGenerator targetPackage="org.louis.hometutor.domain" targetProject="src/main/java">-->
            <!--<property name="enableSubPackages" value="false"/>-->
        <!--</sqlMapGenerator>-->


        <!--&lt;!&ndash; 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码&ndash;&gt;
                &lt;!&ndash;type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象&ndash;&gt;
                &lt;!&ndash;type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象&ndash;&gt;
                &lt;!&ndash;type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口&ndash;&gt;
        &lt;!&ndash;&ndash;&gt;-->
        <!--<javaClientGenerator targetPackage="com.foo.tourist.dao" targetProject="src/main/java" type="MIXEDMAPPER">-->
            <!--<property name="enableSubPackages" value=""/>-->
            <!--&lt;!&ndash;&ndash;&gt;
                    &lt;!&ndash;定义Maper.java 源代码中的ByExample() 方法的可视性，可选的值有：&ndash;&gt;
                    &lt;!&ndash;public;&ndash;&gt;
                    &lt;!&ndash;private;&ndash;&gt;
                    &lt;!&ndash;protected;&ndash;&gt;
                    &lt;!&ndash;default&ndash;&gt;
                    &lt;!&ndash;注意：如果 targetRuntime="MyBatis3",此参数被忽略&ndash;&gt;
             &lt;!&ndash;&ndash;&gt;-->
            <!--<property name="exampleMethodVisibility" value=""/>-->
            <!--&lt;!&ndash;&ndash;&gt;
                                           &lt;!&ndash;方法名计数器&ndash;&gt;
              &lt;!&ndash;Important note: this property is ignored if the target runtime is MyBatis3.&ndash;&gt;
             &lt;!&ndash;&ndash;&gt;-->
            <!--<property name="methodNameCalculator" value=""/>-->

            <!--&lt;!&ndash;&ndash;&gt;
                                                &lt;!&ndash;为生成的接口添加父接口&ndash;&gt;
             &lt;!&ndash;&ndash;&gt;-->
            <!--<property name="rootInterface" value=""/>-->

        <!--</javaClientGenerator>-->



        <!--<table tableName="lession" schema="louis">-->

            <!--&lt;!&ndash; optional   , only for mybatis3 runtime&ndash;&gt;
                 &lt;!&ndash;自动生成的键值（identity,或者序列值）&ndash;&gt;
               &lt;!&ndash;如果指定此元素，MBG将会生成<selectKey>元素，然后将此元素插入到SQL Map的<insert> 元素之中&ndash;&gt;
               &lt;!&ndash;sqlStatement 的语句将会返回新的值&ndash;&gt;
               &lt;!&ndash;如果是一个自增主键的话，你可以使用预定义的语句,或者添加自定义的SQL语句. 预定义的值如下:&ndash;&gt;
                  &lt;!&ndash;Cloudscape    This will translate to: VALUES IDENTITY_VAL_LOCAL()&ndash;&gt;
                  &lt;!&ndash;DB2:      VALUES IDENTITY_VAL_LOCAL()&ndash;&gt;
                  &lt;!&ndash;DB2_MF:       SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1&ndash;&gt;
                  &lt;!&ndash;Derby:        VALUES IDENTITY_VAL_LOCAL()&ndash;&gt;
                  &lt;!&ndash;HSQLDB:   CALL IDENTITY()&ndash;&gt;
                  &lt;!&ndash;Informix:     select dbinfo('sqlca.sqlerrd1') from systables where tabid=1&ndash;&gt;
                  &lt;!&ndash;MySql:        SELECT LAST_INSERT_ID()&ndash;&gt;
                  &lt;!&ndash;SqlServer:    SELECT SCOPE_IDENTITY()&ndash;&gt;
                  &lt;!&ndash;SYBASE:   SELECT @@IDENTITY&ndash;&gt;
                  &lt;!&ndash;JDBC:     This will configure MBG to generate code for MyBatis3 suport of JDBC standard generated keys.&ndash;&gt;
&lt;!&ndash;This is a database independent method of obtaining the value from identity columns.&ndash;&gt;
                  &lt;!&ndash;identity: 自增主键  If true, then the column is flagged as an identity column and the generated <selectKey>&ndash;&gt;
&lt;!&ndash;element will be placed after the insert (for an identity column). If false, then the generated <selectKey> will be placed before&ndash;&gt;
 &lt;!&ndash;the insert (typically for a sequence).&ndash;&gt;

            &lt;!&ndash;&ndash;&gt;-->
            <!--<generatedKey column="" sqlStatement="" identity="" type=""/>-->


            <!--&lt;!&ndash; optional.&ndash;&gt;
                    &lt;!&ndash;列的命名规则：&ndash;&gt;
                    &lt;!&ndash;MBG使用 <columnRenamingRule> 元素在计算列名的对应 名称之前，先对列名进行重命名，&ndash;&gt;
                    &lt;!&ndash;作用：一般需要对BUSI_CLIENT_NO 前的BUSI_进行过滤&ndash;&gt;
                    &lt;!&ndash;支持正在表达式&ndash;&gt;
                     &lt;!&ndash;searchString 表示要被换掉的字符串&ndash;&gt;
                     &lt;!&ndash;replaceString 则是要换成的字符串，默认情况下为空字符串，可选&ndash;&gt;
            &lt;!&ndash;&ndash;&gt;-->
            <!--<columnRenamingRule searchString="" replaceString=""/>-->



            <!--&lt;!&ndash; optional.告诉 MBG 忽略某一列&ndash;&gt;
                    &lt;!&ndash;column，需要忽略的列&ndash;&gt;
                    &lt;!&ndash;delimitedColumnName:true ,匹配column的值和数据库列的名称 大小写完全匹配，false 忽略大小写匹配&ndash;&gt;
                    &lt;!&ndash;是否限定表的列名，即固定表列在Model中的名称&ndash;&gt;
            &lt;!&ndash;&ndash;&gt;-->
            <!--<ignoreColumn column="PLAN_ID"  delimitedColumnName="true" />-->


            <!--&lt;!&ndash;optional.覆盖MBG对Model 的生成规则&ndash;&gt;
                 &lt;!&ndash;column: 数据库的列名&ndash;&gt;
                 &lt;!&ndash;javaType: 对应的Java数据类型的完全限定名&ndash;&gt;
                 &lt;!&ndash;在必要的时候可以覆盖由JavaTypeResolver计算得到的java数据类型. For some databases, this is necessary to handle "odd"&ndash;&gt;
&lt;!&ndash;database types (e.g. MySql's unsigned bigint type should be mapped to java.lang.Object).&ndash;&gt;
                 &lt;!&ndash;jdbcType:该列的JDBC数据类型(INTEGER, DECIMAL, NUMERIC, VARCHAR, etc.)，该列可以覆盖由JavaTypeResolver计算得到的Jdbc类型，&ndash;&gt;
&lt;!&ndash;对某些数据库而言，对于处理特定的JDBC 驱动癖好 很有必要(e.g. DB2's LONGVARCHAR type should be mapped to VARCHAR for iBATIS).&ndash;&gt;
                 &lt;!&ndash;typeHandler:&ndash;&gt;

            &lt;!&ndash;&ndash;&gt;-->
            <!--<columnOverride column="" javaType=""    jdbcType="" typeHandler=""  delimitedColumnName="" />-->

        <!--</table>-->
    <!--</context>-->
<!--</generatorConfiguration>-->
